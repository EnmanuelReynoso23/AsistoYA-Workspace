import cv2
import numpy as np
import torch

class Camera:
    def __init__(self, source=0):
        self.source = source
        self.capture = cv2.VideoCapture(self.source)
        self.configure_camera()
        # self.model = torch.hub.load('ultralytics/yolov5', 'yolov5s')  # Model loading disabled for demo/run without torch.hub
        self.model = None

    def configure_camera(self):
        # Adjust lighting and contrast settings
        self.capture.set(cv2.CAP_PROP_BRIGHTNESS, 0.5)
        self.capture.set(cv2.CAP_PROP_CONTRAST, 0.5)

    def start_capture(self):
        while True:
            ret, frame = self.capture.read()
            if not ret:
                break

            # Process the frame (e.g., using OpenCV or YOLOv8)
            processed_frame = self.process_frame(frame)

            # Display the frame
            cv2.imshow('Camera', processed_frame)

            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
                
        self.capture.release()
        cv2.destroyAllWindows()
        
    def process_frame(self, frame):
        # Convert image to format suitable for display in tkinter
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        img = cv2.resize(rgb_frame, (640, 480))
        
        # Si el modelo est치 disponible, hacer detecci칩n
        if self.model:
            try:
                results = self.model(img)
                
                # Dibujar los resultados de detecci칩n
                for *box, conf, cls in results.xyxy[0]:
                    x1, y1, x2, y2 = [int(i) for i in box]
                    cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)
                    cv2.putText(img, f'Persona: {conf:.2f}', (x1, y1 - 10), 
                                cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
            except Exception as e:
                print(f"Error en la detecci칩n: {e}")
        
        # Convertir a PhotoImage para tkinter
        from PIL import Image, ImageTk
        pil_img = Image.fromarray(img)
        tk_img = ImageTk.PhotoImage(image=pil_img)
        
        return tk_img

    def improve_performance(self):
        # Use more advanced models or techniques to improve performance and accuracy
        self.model = torch.hub.load('ultralytics/yolov5', 'yolov5m')  # Use a more advanced model

if __name__ == "__main__":
    camera = Camera()
    camera.start_capture()
